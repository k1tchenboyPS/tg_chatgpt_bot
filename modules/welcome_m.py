import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

"""
logging ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
Update ‚Äî –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
InlineKeyboardButton, InlineKeyboardMarkup ‚Äî –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
ContextTypes ‚Äî —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start handler"""
    keyboard = [
        [
            InlineKeyboardButton("üé≤ –§–∞–∫—Ç", callback_data="random_fact"),
            InlineKeyboardButton("üòé –ü—Ä–∏–≤–µ—Ç!", callback_data="say_hi")
        ],
        [InlineKeyboardButton("‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data="random_fact")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞!üôã</b>"

    if update.message:
        await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)

    elif update.callback_query:
        query = update.callback_query
        await query.answer()

        can_edit = query.message and query.message.text is not None

        if can_edit:
            await query.edit_message_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await query.message.delete()
            await query.message.chat.send_message(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
