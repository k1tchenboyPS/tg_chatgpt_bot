import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import get_chatgpt_response
from handlers.flag import Flags
from services.whisper_client import transcribe_audio
from gtts import gTTS


logger = logging.getLogger(__name__)

CAPTION = (
    "üìå <b>–ì–æ–ª–æ—Å–æ–≤–æ–π ChatGPT:</b>\n\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å ChatGPT —Å –ø–æ–º–æ—â—å—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
    "üëá –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç."
)

async def voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.chat_data.clear()
    logger.warning("üì• des_picture_command –≤—ã–∑–≤–∞–Ω")
    return await voice_menu(update, context)

async def voice_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.warning("üì• des_picture_menu –≤—ã–∑–≤–∞–Ω")

        current_dir = os.path.dirname(__file__)
        photo_path = os.path.join(current_dir, "..", "pictures", "voice_menu.png")
        photo_path = os.path.abspath(photo_path)

        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.message.delete()
            chat = query.message.chat
        elif update.message:
            chat = update.message.chat
        else:
            logger.warning("‚ùå des_picture_menu: no valid update source")
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await chat.send_photo(
            photo=photo_path,
            caption=CAPTION,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        logger.warning("‚úÖ –í–æ–∑–≤—Ä–∞—Ç Flags.DESCRIBE_PICTURE")
        return Flags.VOICE_CHAT

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ des_picture_menu: {e}")
        return ConversationHandler.END

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

    try:
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.message.delete()
            chat = query.message.chat
        elif update.message:
            chat = update.message.chat
        else:
            logger.warning("‚ùå handle_voice: –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ update")
            return ConversationHandler.END

        menu_msg_id = context.chat_data.pop("menu_msg_id", None)
        if menu_msg_id:
            try:
                await context.bot.delete_message(chat_id=chat.id, message_id=menu_msg_id)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")

        voice = update.message.voice
        file = await voice.get_file()
        voice_path = f"/tmp/{file.file_id}.ogg"
        await file.download_to_drive(voice_path)

        processing_msg = await update.message.reply_text(
            "üéô –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –Ω–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –ø—ã—Ç–∞—è—Å—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
        )

        wav_path = voice_path.replace(".ogg", ".wav")
        os.system(f"ffmpeg -i {voice_path} -ar 16000 -ac 1 {wav_path}")

        text = await transcribe_audio(wav_path)
        logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        chat_history = context.user_data.get("chat_history", [])
        chat_history.append({"role": "user", "content": text})

        gpt_response = await get_chatgpt_response(chat_history)
        logger.info(f"GPT –æ—Ç–≤–µ—Ç: {gpt_response}")

        chat_history.append({"role": "assistant", "content": gpt_response})
        context.user_data["chat_history"] = chat_history

        tts = gTTS(gpt_response, lang="ru")
        tts_path = f"/tmp/response_{file.file_id}.mp3"
        tts.save(tts_path)

        await processing_msg.delete()

        with open(tts_path, "rb") as voice_reply:
            await update.message.reply_voice(voice=voice_reply)

        keyboard = [
            [InlineKeyboardButton("üéß –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="voice")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        menu_message = await chat.send_message(
            "<b>üìå –ì–æ–ª–æ—Å–æ–≤–æ–π ChatGPT:</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        context.chat_data["menu_msg_id"] = menu_message.message_id

        for path in [voice_path, wav_path, tts_path]:
            try:
                os.remove(path)
            except FileNotFoundError:
                pass

        return Flags.VOICE_CHAT

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –¥–∏–∞–ª–æ–≥–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return ConversationHandler.END