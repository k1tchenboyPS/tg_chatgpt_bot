import logging
import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_client import get_chatgpt_response
from services.quiz_topics import get_quiz_topics_keyboard, get_quiz_topic_data, get_quiz_continue_keyboard
from handlers.flag import *
logger = logging.getLogger(__name__)

async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ /quiz')
    return await quiz_start(update, context)

async def quiz_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é quiz_start')
    try:
        current_dir = os.path.dirname(__file__)
        photo_path = os.path.join(current_dir, "..", "pictures", "quiz_menu.png")
        photo_path = os.path.abspath(photo_path)
        message_text = (
            "üß† <b>–ö–≤–∏–∑ - –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞:\n\n"
            "üíª <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–¥–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö\n"
            "üèõÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è</b> - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è\n"
            "üî¨ <b>–ù–∞—É–∫–∞</b> - —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –±–∏–æ–ª–æ–≥–∏—è\n"
            "üåç <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - —Å—Ç—Ä–∞–Ω—ã, —Å—Ç–æ–ª–∏—Ü—ã, –ø—Ä–∏—Ä–æ–¥–∞\n"
            "üé¨ <b>–ö–∏–Ω–æ</b> - —Ñ–∏–ª—å–º—ã –∏ –∞–∫—Ç–µ—Ä—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
        )

        keyboard = get_quiz_topics_keyboard()

        if 'quiz_score' not in context.user_data:
            context.user_data['quiz_score'] = 0
            context.user_data['quiz_total'] = 0

        if update.callback_query:
            if os.path.exists(photo_path):
                await update.callback_query.message.delete()
                with open(photo_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=update.callback_query.message.chat_id,
                        photo=photo,
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.callback_query.edit_message_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            await update.callback_query.answer()

        else:
            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.message.reply_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        logger.info("return >> Flags.SELECTING_TOPIC")
        return Flags.SELECTING_TOPIC

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞: {e}")
        error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)

        return -1


async def topic_selected(update: Update, context: ContextTypes.DEFAULT_TYPE, topic_key: str = None):
    query = update.callback_query
    await query.answer()

    try:
        if not topic_key:
            topic_key = query.data.replace("quiz_topic_", "")

        topic_data = get_quiz_topic_data(topic_key)

        if not topic_data:
            if query.message.photo:
                await query.edit_message_caption("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return -1

        context.user_data['current_quiz_topic'] = topic_key
        context.user_data['quiz_topic_data'] = topic_data
        processing_text = f"{topic_data['emoji']} –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {topic_data['name']}... ‚è≥"
        if query.message.photo:
            await query.edit_message_caption(processing_text, parse_mode='HTML')
        else:
            await query.edit_message_text(processing_text, parse_mode='HTML')

        chat_history = context.user_data.get("chat_history", [])
        chat_history.append({"role": "user", "content": topic_data['prompt']})

        question_raw = await get_chatgpt_response(chat_history)
        question = re.sub(r'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.*', '', question_raw, flags=re.IGNORECASE).strip()
        context.user_data['current_question'] = question

        correct_answer = extract_correct_answer(question_raw)
        context.user_data['correct_answer'] = correct_answer

        message_text = (
            f"üìå <b>–ö–≤–∏–∑: {topic_data['name']}</b>\n\n"
            f"{question}\n\n"
            f"üìä <b>–°—á–µ—Ç:</b> {context.user_data['quiz_score']}/{context.user_data['quiz_total']}\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (A, B, C –∏–ª–∏ D):"
        )

        if query.message.photo:
            await query.edit_message_caption(
                caption=message_text,
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(
                text=message_text,
                parse_mode='HTML'
            )
        logger.info(">>> returning ANSWERING_QUESTION IN TOPIC SELECTED")
        return Flags.ANSWERING_QUESTION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã –∫–≤–∏–∑–∞: {e}")
        try:
            if query.message.photo:
                await query.edit_message_caption("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await query.edit_message_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        return -1


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(">>> handle_quiz_answer TRIGGERED")
    try:
        user_answer = update.message.text.strip().upper()
        correct_answer = context.user_data.get('correct_answer', '').upper()
        topic_data = context.user_data.get('quiz_topic_data')
        current_question = context.user_data.get('current_question', '')

        if not topic_data or not correct_answer:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quiz –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return -1

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        is_correct = user_answer == correct_answer

        context.user_data['quiz_total'] += 1
        if is_correct:
            context.user_data['quiz_score'] += 1

        processing_msg = await update.message.reply_text(
            f"{topic_data['emoji']} –ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç–≤–µ—Ç... ‚è≥"
        )

        analysis_prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª '{user_answer}' –Ω–∞ –≤–æ–ø—Ä–æ—Å:
        {current_question}

        –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}

        –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –ø–æ —Ç–µ–º–µ."""

        chat_history = context.user_data.get("chat_history", [])
        chat_history.append({"role": "user", "content": analysis_prompt + "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–≤–∏–∑–∞–º, –æ–±—ä—è—Å–Ω—è–µ—à—å –æ—Ç–≤–µ—Ç—ã –ø–æ–Ω—è—Ç–Ω–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."})
        detailed_response = await get_chatgpt_response(chat_history)

        if is_correct:
            result_text = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n{detailed_response}"
        else:
            result_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n{detailed_response}"

        keyboard = get_quiz_continue_keyboard(context.user_data['current_quiz_topic'])

        await processing_msg.delete()
        await update.message.reply_text(
            f"{topic_data['emoji']} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞</b>\n\n"
            f"{result_text}\n\n"
            f"üìä <b>–í–∞—à —Å—á–µ—Ç:</b> {context.user_data['quiz_score']}/{context.user_data['quiz_total']}",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        logger.info(">>> returning ANSWERING_QUESTION")
        return Flags.ANSWERING_QUESTION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–≤–∏–∑–∞: {e}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        logger.info(">>> returning ANSWERING_QUESTION")
        return Flags.ANSWERING_QUESTION


async def handle_quiz_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        logger.info(f"[DATA] {query.data}")
        if query.data.startswith("quiz_continue_"):
            topic_key = query.data.replace("quiz_continue_", "")
            return await topic_selected(update, context, topic_key=topic_key)

        elif query.data == "quiz_change_topic":
            return await quiz_start(update, context)

        elif query.data == "quiz_finish":
            score = context.user_data.get('quiz_score', 0)
            total = context.user_data.get('quiz_total', 0)

            if total > 0:
                percentage = round((score / total) * 100)
                if percentage >= 80:
                    emoji = "üèÜ"
                    grade = "–û—Ç–ª–∏—á–Ω–æ!"
                elif percentage >= 60:
                    emoji = "ü•à"
                    grade = "–•–æ—Ä–æ—à–æ!"
                elif percentage >= 40:
                    emoji = "ü•â"
                    grade = "–ù–µ–ø–ª–æ—Ö–æ!"
                else:
                    emoji = "üìö"
                    grade = "–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
            else:
                percentage = 0
                emoji = "ü§î"
                grade = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"

            final_text = (
                f"{emoji} <b>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üìä <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç: {percentage}%\n\n"
                f"<b>{grade}</b>\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üéâ"
            )

            context.user_data.pop('quiz_score', None)
            context.user_data.pop('quiz_total', None)
            context.user_data.pop('current_quiz_topic', None)
            context.user_data.pop('quiz_topic_data', None)
            context.user_data.pop('current_question', None)
            context.user_data.pop('correct_answer', None)

            keyboard = [
                [InlineKeyboardButton("üß† –ù–æ–≤—ã–π –∫–≤–∏–∑", callback_data="quiz_interface")],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                final_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return -1

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ quiz callback: {e}")
        await query.edit_message_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return -1

    return Flags.ANSWERING_QUESTION


def extract_correct_answer(question_text):
    try:
        lines = question_text.split('\n')
        for line in lines:
            if '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç' in line.lower():
                match = re.search(r'[ABCD]', line.upper())
                if match:
                    return match.group()

        match = re.search(r'–æ—Ç–≤–µ—Ç:\s*([ABCD])', question_text.upper())
        if match:
            return match.group(1)

        return 'A'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        return 'A'