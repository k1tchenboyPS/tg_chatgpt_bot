import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import get_chatgpt_response
import os
from handlers.reset_conversation_handler import reset_conv_handler

from handlers.flag import *
logger = logging.getLogger(__name__)


# WAITING_FOR_MESSAGE = 1

CAPTION = ("ü§ñ <b>–ß–∞—Ç —Å GPT:</b>\n\n"
           "ü§î<b>–ù–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?</b>\n"
           "–ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É.\n"
           "üí¨ –õ—é–±–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–µ–º–∞, –∏–¥–µ—è ‚Äî –∑–¥–µ—Å—å –≤—Å—ë –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è.\n"
           "üí° –ü–æ—Ä–∞ –≤–∫–ª—é—á–∏—Ç—å –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º!")

async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    return await gpt_start(update, context)


async def gpt_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # reset_conv_handler()
        # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["chat_history"] = []

        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.message.delete()
            chat = query.message.chat
        elif update.message:
            chat = update.message.chat
        else:
            logger.warning("gpt_start: no valid update source")
            return -1

        current_dir = os.path.dirname(__file__)
        photo_path = os.path.join(current_dir, "..", "pictures", "gpt_menu.png")
        image_path = os.path.abspath(photo_path)

        keyboard = [
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await chat.send_photo(
                    photo=photo,
                    caption=CAPTION,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            await chat.send_message(
                text=CAPTION,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

        logger.info(">>> gpt_start: entering WAITING_FOR_MESSAGE")
        # return WAITING_FOR_MESSAGE
        return Flags.WAITING_FOR_MESSAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(error_text)
            else:
                await update.message.reply_text(error_text)
        except Exception as inner_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {inner_e}")

        return -1

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)
        return -1


async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ChatGPT"""
    logger.info("chatgpt answer, not personality")
    try:
        user_message = update.message.text

        if user_message in ["/talk", "/gpt", "/start"]:
            logger.info(f"[GPT]: {user_message}")
            return reset_conv_handler()

        chat_history = context.user_data.get("chat_history", [])
        chat_history.append({"role": "user", "content": user_message})

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... ‚è≥")

        gpt_response = await get_chatgpt_response(chat_history)
        chat_history.append({"role": "assistant", "content": gpt_response})
        context.user_data["chat_history"] = chat_history

        keyboard = [
            [InlineKeyboardButton("üí£ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="gpt")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await processing_msg.delete()
        await update.message.reply_text(
            f"ü§ñ <b>ChatGPT –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{gpt_response}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        # return WAITING_FOR_MESSAGE
        # return Flags.WAITING_FOR_MESSAGE
        return Flags.WAITING_FOR_MESSAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT: {e}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        # return WAITING_FOR_MESSAGE
        # return Flags.WAITING_FOR_MESSAGE
        return reset_conv_handler()