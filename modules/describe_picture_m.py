import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import describe_image_with_gpt
from handlers.flag import Flags

logger = logging.getLogger(__name__)

CAPTION = (
    "üìå <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>\n\n"
    "ChatGPT –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.\n\n"
    "üëá –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç."
)

async def des_picture_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.chat_data.clear()
    logger.warning("üì• des_picture_command –≤—ã–∑–≤–∞–Ω")
    return await des_picture_menu(update, context)

async def des_picture_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.warning("üì• des_picture_menu –≤—ã–∑–≤–∞–Ω")

        current_dir = os.path.dirname(__file__)
        photo_path = os.path.join(current_dir, "..", "pictures", "des_picture_menu.png")
        photo_path = os.path.abspath(photo_path)

        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.message.delete()
            chat = query.message.chat
        elif update.message:
            chat = update.message.chat
        else:
            logger.warning("‚ùå des_picture_menu: no valid update source")
            return ConversationHandler.END

        # –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await chat.send_photo(
            photo=photo_path,
            caption=CAPTION,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        logger.warning("‚úÖ –í–æ–∑–≤—Ä–∞—Ç Flags.DESCRIBE_PICTURE")
        return Flags.DESCRIBE_PICTURE

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ des_picture_menu: {e}")
        return ConversationHandler.END

async def handle_picture(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning("üì∏ handle_picture –≤—ã–∑–≤–∞–Ω")

    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        path = f"/tmp/{file.file_id}.jpg"
        await file.download_to_drive(path)
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... ‚è≥")

        keyboard = [
            [InlineKeyboardButton("üñº –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="picture")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        response = await describe_image_with_gpt(path)
        await processing_msg.delete()
        await update.message.reply_text(
            f"ü§ñ <b>GPT —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:</b>\n\n{response}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return ConversationHandler.END
