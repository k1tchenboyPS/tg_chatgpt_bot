"""–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ random fact"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_client import get_random_fact
from services.gpt_promts import RANDOM_FACT_PROMPTS

logger = logging.getLogger(__name__)

async def random_fact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            show_random_choice = query.edit_message_text
        else:
            show_random_choice = update.message.reply_text

        keyboard = [
            [InlineKeyboardButton("‚≠ê –û–±—ã—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –≤—Å–µ–º", callback_data="generate_fact:general")],
            [InlineKeyboardButton("üî• –§–∞–∫—Ç—ã, –µ—Å–ª–∏ —É —Ç–µ–±—è –≤—ã–≥–æ—Ä–∞–Ω–∏–µ", callback_data="generate_fact:burnout")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await show_random_choice("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç!", reply_markup=reply_markup)
    except Exception as e:
        logger.info(f"Error in random_fact_callback: {e}")

async def generate_random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        callback_data = query.data
        _, fact_type = callback_data.split(":", maxsplit=1)

        loading_msg = await query.edit_message_text("‚åõ –ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ...")

        prompts = RANDOM_FACT_PROMPTS.get(fact_type, RANDOM_FACT_PROMPTS["general"])
        fact = await get_random_fact(
            sys_conten=prompts["system"],
            user_content=prompts["user"]
        )

        keyboard = [
            [InlineKeyboardButton("üé≤ –ù–æ–≤—ã–π —Ñ–∞–∫—Ç ", callback_data=f"generate_fact:{fact_type}")],
            [InlineKeyboardButton("üö™ –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–∫—Ç–æ–≤", callback_data="random_fact")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await loading_msg.edit_text(
            f"üß† <b>–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å —á—É—Ç—å –±–æ–ª—å—à–µ: </b>\n\n{fact}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error while trying to generate fact in first_random_choice: {e}")
        await query.edit_message_text("Fail, sorry, i can not generate a random fact :(")

