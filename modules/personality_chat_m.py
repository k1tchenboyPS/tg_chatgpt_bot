import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_client import personality_chatgpt_response
import os
from handlers.flag import *

logger = logging.getLogger(__name__)

CAPTION = (
    "üìå <b>–û–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏:</b>\n\n"
    "–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –≤–µ–ª–∏–∫–∏—Ö —É–º–æ–≤ ‚Äî –æ—Ç –≥–µ–Ω–∏–µ–≤ –Ω–∞—É–∫–∏ –¥–æ –≤–∏–∑–∏–æ–Ω–µ—Ä–æ–≤ –±–∏–∑–Ω–µ—Å–∞.\n\n"
    "üí¨ <b>–û–Ω–∏ –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∏—Ç—å—Å—è:</b>\n"
    "‚Ä¢ –ú—É–¥—Ä–æ—Å—Ç—å—é\n"
    "‚Ä¢ –ò–¥–µ—è–º–∏\n"
    "‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è–ª–∏ –º–∏—Ä\n"
    "‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n\n"
    "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –∏ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥."
)

TESLA_CAPTION = (
    "üî¨ <b>–û–±—â–µ–Ω–∏–µ —Å –ù–∏–∫–æ–ª–æ–π –¢–µ—Å–ª–æ–π:</b>\n\n"
    "–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞ ‚Äî –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å –∏ –∏–Ω–∂–µ–Ω–µ—Ä, —á—å–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞, –º–∞–≥–Ω–µ—Ç–∏–∑–º–∞ –∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏"
    " —ç–Ω–µ—Ä–≥–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏ —Ö–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
    "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
)

JOBS_CAPTION = (
    "üçè <b>–û–±—â–µ–Ω–∏–µ —Å–æ –°—Ç–∏–≤–æ–º –î–∂–æ–±—Å–æ–º:</b>\n\n"
    "–°—Ç–∏–≤ –î–∂–æ–±—Å ‚Äî –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å Apple –∏ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–∑–∏–æ–Ω–µ—Ä–æ–≤ –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π,"
    " –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –ø—Ä–æ—Å—Ç–æ—Ç–µ, –¥–∏–∑–∞–π–Ω—É –∏ —Å–∏–ª–µ –∏–¥–µ–π.\n\n"
    "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
)
PERELMAN_CAPTION = (
    "üß† <b>–û–±—â–µ–Ω–∏–µ —Å –ì—Ä–∏–≥–æ—Ä–∏–µ–º –ü–µ—Ä–µ–ª—å–º–∞–Ω–æ–º:</b>\n\n"
    "–ì—Ä–∏–≥–æ—Ä–∏–π –ü–µ—Ä–µ–ª—å–º–∞–Ω ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏–∫, —Ä–µ—à–∏–≤—à–∏–π –≥–∏–ø–æ—Ç–µ–∑—É –ü—É–∞–Ω–∫–∞—Ä–µ –∏ –ø—Ä–æ—Å–ª–∞–≤–∏–≤—à–∏–π—Å—è —Å–≤–æ–∏–º –æ—Ç–∫–∞–∑–æ–º –æ—Ç –Ω–∞–≥—Ä–∞–¥,"
    " —Å–ª–∞–≤—ã –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤ —Å –∏—Å—Ç–∏–Ω–æ–π.\n\n"
    "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
)

async def per_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    return await per_chat_menu(update, context)

async def per_chat_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["chat_history"] = []
        context.user_data.pop("person_caption", None)

        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.message.delete()
            chat = query.message.chat
        elif update.message:
            chat = update.message.chat
        else:
            logger.warning("gpt_start: no valid update source")
            return -1

        current_dir = os.path.dirname(__file__)
        photo_path = os.path.join(current_dir, "..", "pictures", "personality_menu.png")
        image_path = os.path.abspath(photo_path)
        keyboard = [
            [
                InlineKeyboardButton("üî¨ –ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞", callback_data="person_talk:tesla"),
                InlineKeyboardButton("üçè –°—Ç–∏–≤ –î–∂–æ–±—Å", callback_data="person_talk:jobs")
            ],
            [InlineKeyboardButton("üß† –ì—Ä–∏–≥–æ—Ä–∏–π –ü–µ—Ä–µ–ª—å–º–∞–Ω", callback_data="person_talk:perelman")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await chat.send_photo(
                    photo=photo,
                    caption=CAPTION,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            await chat.send_message(
                text=CAPTION,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –º–µ–Ω—é —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏: {e}")

async def per_chat_start(update: Update, context: ContextTypes.DEFAULT_TYPE, photo_name = None, caption = None):
    try:
        context.user_data.clear()
        context.user_data["chat_history"] = []

        query = update.callback_query
        await query.answer()

        _, personality_type = query.data.split(":", maxsplit=1)

        if personality_type == "tesla" and photo_name is None and caption is None:
            photo_name = "tesla_photo.png"
            caption = TESLA_CAPTION
            person_name = "üî¨ –ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞"
            logger.info("–í—ã–±—Ä–∞–ª–∏ –¢–µ—Å–ª—É")
        elif personality_type == "jobs" and photo_name is None and caption is None:
            photo_name = "jobs_photo.png"
            caption = JOBS_CAPTION
            person_name = "üçè –°—Ç–∏–≤ –î–∂–æ–±—Å"
            logger.info("–í—ã–±—Ä–∞–ª–∏ –î–∂–æ–±—Å–∞")
        elif personality_type == "perelman" and photo_name is None and caption is None:
            photo_name = "perelman_photo.png"
            caption = PERELMAN_CAPTION
            person_name = "üß† –ì—Ä–∏–≥–æ—Ä–∏–π –ü–µ—Ä–µ–ª—å–º–∞–Ω"
            logger.info("–í—ã–±—Ä–∞–ª–∏ –ü–µ—Ä–µ–ª—å–º–∞–Ω–∞")
        else:
            logger.info("–õ–∏—á–Ω–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞")

        context.user_data["person_caption"] = caption
        context.user_data["person_name"] = person_name

        current_dir = os.path.dirname(__file__)
        photo_path = os.path.join(current_dir, "..", "pictures", photo_name)
        photo_path = os.path.abspath(photo_path)

        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.message.delete()
            chat = query.message.chat
        elif update.message:
            chat = update.message.chat
        else:
            logger.warning("person_talk_start: no valid update source")
            return -1

        keyboard = [
            [InlineKeyboardButton("üí¨ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="talk")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                await chat.send_photo(
                    photo=photo,
                    caption=caption,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            await chat.send_message(
                text=caption,
                parse_mode='HTML',
                reply_markup=reply_markup
            )

        logger.info(">>> gpt_start: entering why WAITING_FOR_MESSAGE")
        return Flags.PERS_CHAT_FLAG


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")

async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE, caption=None):
    logger.info("handle_gpt_message")
    caption = context.user_data.get("person_caption")
    person_name = context.user_data.get("person_name")

    try:
        user_message = update.message.text

        chat_history = context.user_data.get("chat_history", [])
        chat_history.append({"role": "user", "content": user_message})

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... ‚è≥")
        gpt_response = await personality_chatgpt_response(chat_history, caption)
        chat_history.append({"role": "assistant", "content": gpt_response})
        context.user_data["chat_history"] = chat_history
        logger.info(f"processing_msg: {user_message}")

        keyboard = [
            [InlineKeyboardButton("üö™ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="talk")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await processing_msg.delete()
        await update.message.reply_text(
            f"<b>{person_name} –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{gpt_response}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        logger.info(f"processing_msg: {user_message}")
        return Flags.PERS_CHAT_FLAG


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT: {e}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return Flags.PERS_CHAT_FLAG